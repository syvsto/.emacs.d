#+TITLE: My Emacs configuration
#+PROPERTY: tangle "init.el"
#+PROPERTY: header-args :results silent :noweb yes

This configuration focuses on modal bindings and general ergonomics to reduce
risk of RSI while sticking to "the emacs way", meaning it tries to avoid too
much rebinding across packages such as done by spacemacs and doom.

* Initialization

The config uses ~straight.el~ as the package manager, since it allows the use of
various packages that only are available on github. Additionally, ~use-package~ is
used to configure the packages, as it allows for clean separation of setting
options, and eases deferring the loading of packages.

** Bootstrap straight

The ~straight.el~ bootstrap code is performed in the ~init.el~ file because ~straight~
needs to make sure it controls which version of ~org~ is loaded, and I tangle this
file on startup.

In order to avoid loading the built-in ~org-mode~, the ~init.el~ file makes sure the
upstream version is loaded before other packages start using ~org-mode~
functionality.

** Use-package

With straight installed, ~use-package~ can be installed using the
~(straight-use-package)~ function.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

Use-package uses the built-in ~package.el~ by default, and eagerly loads packages.
To reduce startup times and use ~straight~ for package installation, some options
for ~use-package~ need to be set.

#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
  (setq use-package-always-defer t)
#+END_SRC

** Cleaning up Emacs' trash

By default, emacs will put a lot of files on various places on the hard drive.
The ~no-littering~ package organizes these files in a better manner, keeping
things more organized.

#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :demand t)
#+END_SRC

** Essential libraries for elisp

There are some libraries that are very commonly used when working with elisp, to
alleviate some of the pain points of the language.

~s.el~ contains various convenience functions for working with strings.

#+BEGIN_SRC emacs-lisp
  (use-package s)
#+END_SRC

~dash~ contains various convenience functions for working with lists.

#+BEGIN_SRC emacs-lisp
  (use-package dash)
#+END_SRC

** Environment variables

On MacOS, you often don't get the correct $PATH when using GUI Emacs. The
~exec-path-from-shell~ package fixes this.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :commands (exec-path-from-shell-initialize)
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

** Important initial settings

Some settings *must* be changed to make Emacs usable. Importantly, it should not
be necessary to type "yes" and "no" for every prompt!  However, to avoid killing
Emacs by accident, prompt when the ~kill-emacs~ function is called.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

Since it is easy to mistype things, the error bell sound of Emacs can become
annoying.  Disable it.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Also, there is not much point in having the menu bar and scroll bars visible, as
the information is available elsewhere.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
#+END_SRC

Emacs should use UTF-8 encoding by default, as has become common.
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-selection-coding-system 'utf-8)
#+end_src

Finally, get rid of the default splash screen and jump straight to a scratch
buffer.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message ";; INITIALIZED...")
#+end_src

** Mac specifics

On Mac, I like keeping the right alt modifier as-is, to be able to input special
characters with ease.

#+begin_src emacs-lisp
  (setq ns-right-alternate-modifier nil)
#+end_src

A small aesthetic change is keeping the title bar and theme in the same color.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+end_src

Highlight the current line.
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

** Dired

Dired has some rough edges. The series of packages from ~dired-hacks~ helps add some
features that make dired easier to use in certain cases.

#+begin_src emacs-lisp
  (use-package dired-subtree
    :config
    (bind-keys :map dired-mode-map
	       :prefix ","
	       :prefix-map dired-subtree-map
	       :prefix-docstring "Dired subtree map."
	       ("i" . dired-subtree-insert)
	       ("/" . dired-subtree-apply-filter)
	       ("k" . dired-subtree-remove)
	       ("n" . dired-subtree-next-sibling)
	       ("p" . dired-subtree-previous-sibling)
	       ("u" . dired-subtree-up)
	       ("d" . dired-subtree-down)
	       ("a" . dired-subtree-beginning)
	       ("e" . dired-subtree-end)
	       ("c" . dired-subtree-cycle)
	       ("m" . dired-subtree-mark-subtree)
	       ("u" . dired-subtree-unmark-subtree)
	       ("o f" . dired-subtree-only-this-file)
	       ("o d" . dired-subtree-only-this-directory))
    (bind-keys :map dired-mode-map
	       ("i" . dired-subtree-insert)))

  (use-package dired-filter
    :bind (:map dired-mode-map
		("C-o" . dired-filter-mode)
		("C-S-o" . dired-filter-group-mode)))

  (use-package dired-narrow
    :commands dired-narrow
    :config
    (bind-key "s" 'dired-narrow dired-mode-map))

  (use-package dired-ranger
    :config
    (bind-keys :map dired-mode-map
	       :prefix "c"
	       :prefix-map dired-ranger-map
	       :prefix-docstring "Map for ranger operations."
      ("c" . dired-ranger-copy)
      ("p" . dired-ranger-paste)
      ("m" . dired-ranger-move))

    (bind-keys :map dired-mode-map
      ("'" . dired-ranger-bookmark)
      ("`" . dired-ranger-bookmark-visit)))
#+end_src

* Key bindings and navigation

Modal Emacs bindings for that sweet RSI relief.

#+begin_src emacs-lisp
  (use-package god-mode
    :bind
    (("<escape>" . god-local-mode)
     ("C-x C-1" . delete-other-windows)
     ("C-x C-2" . split-window-below)
     ("C-x C-3" . split-window-right)
     ("C-x C-0" . delete-window)
     (:map god-local-mode-map
	   ("z" . repeat)
	   ("i" . god-local-mode))
     (:map isearch-mode-map
	   ("<escape>" . god-mode-isearch-activate))
     (:map god-mode-isearch-map
	   ("<escape>" . god-mode-isearch-disable)))
    :config
    (require 'god-mode-isearch)
    (global-set-key (kbd "<escape>") #'god-local-mode)
    (which-key-enable-god-mode-support))
#+END_src

** FFAP

FFAP is great for navigating to imports of different file types, such as CSS
files in HTML/Javascript.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c f") 'ffap)
#+end_src

** Avy

Avy allows quick candidate selection.
#+begin_src emacs-lisp
  (use-package avy
    :bind (("M-g M-g" . avy-goto-line)
	   ("C-'" . avy-goto-word-1)
	   (:map isearch-mode-map
		 ("C-'" . avy-isearch))))
#+end_src

** Anzu

Updates search-and-replace with some nice features such as seeing number of
candidates in modeline and seeing the replacement as you type.

#+begin_src emacs-lisp
  (use-package anzu
    :bind (([remap query-replace] . anzu-query-replace)
	   ([remap query-replace-regexp] . anzu-query-replace-regexp))
    :init
    (global-anzu-mode +1))
#+end_src

** Undo tree

Undo tree is perfect when making mistakes.

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode))
#+end_src

** Completion framework

Helm, because it collects many different sources in a single buffer so I don't
need to mess as much about with many different commands (such as when using
~helm-mini~).

#+begin_src emacs-lisp
  (use-package helm
    :defer nil
    :custom
    (helm-grep-ag-command (concat "rg"
				  " --color=never"
				  " --smart-case"
				  " --no-heading"
				  " --line-number %s %s %s"))
    (helm-grep-file-path-style 'relative)
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("C-x b" . helm-mini)
     ("C-c r" . helm-do-grep-ag)
     ("M-y" . helm-show-kill-ring))
    :config
    (require 'helm-for-files)
    (helm-mode 1))
#+end_src

Company for completion at point, since it's nice. I don't like the auto-popup
from company, so I only trigger it manually. 

#+begin_src emacs-lisp
  (use-package company
    :custom
    (company-idle-delay nil)
    :init
    (global-company-mode 1))
#+end_src

Helm-company allows displaying company candidates in a helm buffer, so it's
easier to narrow down the list of options.

#+begin_src emacs-lisp
  (use-package helm-company
    :bind (:map company-mode-map
		("C-;" . helm-company)))
#+end_src

** Imenu

IMenu is a useful, built-in navigation tool for many modes, but is unbound. Bind to ~M-i~, since that's only used for indentation by default.
#+begin_src emacs-lisp
  (bind-key "M-i" 'imenu)
#+end_src

However, IMenu will often require navigating through multiple menus. Since I
have fuzzy completion it's better if the list of IMenu entries can be searched
in its entirety. The ~flimenu~ package flattens the ~imenu~ so this works.

#+begin_src emacs-lisp
  (use-package flimenu
    :hook (after-init . flimenu-global-mode))
#+end_src

** Bufler

Bufler is a nice replacement for IBuffer that allows better and simpler
grouping, grouping into many levels, and an interaction scheme somewhat aligned
with magit.

#+begin_src emacs-lisp
  (use-package bufler
    :bind ("C-x C-b" . bufler)
    :hook (after-init . bufler-mode))
#+end_src

The bufler buffer grouping/switching functionality is a bit buggy, and will
either add buffer headers to the buffer list, or hide the buffer list
entirely. I therefore rely on regular buffer switching, and only use bufler as
an Ibuffer replacement.

** Crux

  The Crux package contains a bunch of useful shortcuts.

#+begin_src emacs-lisp
  (use-package crux
    :bind (("C-c o" . crux-open-with)
	   ("C-^" . crux-top-join-line)
	   ("C-c n" . crux-cleanup-buffer-or-region)
	   ("C-c u" . crux-view-url)
	   ("C-a" . crux-move-beginning-of-line)
	   ("C-c e" . crux-eval-and-replace)
	   ("C-x 4 t" . crux-transpose-windows)
	   ("C-c k" . crux-kill-other-buffers)
	   ("C-c D" . crux-delete-file-and-buffer)))
#+end_src

* Looks and layout

** Theme and fonts
#+begin_src emacs-lisp
    (load (concat user-emacs-directory "synthetiq-theme.el"))
  (load (concat user-emacs-directory "synthetiq-light-theme.el"))
#+end_src

Julia Mono has a lot of unicode symbols, perfect for e.g. Agda.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "JuliaMono" :height 130)
  (set-face-attribute 'fixed-pitch nil :family "JuliaMono" :height 130)
  (set-face-attribute 'variable-pitch nil :family "JuliaMono" :height 130)
#+END_SRC

** Modeline

Push some elements to the right on the modeline, so it looks more balanced.

#+begin_src emacs-lisp
  (defun mode-line-fill (reserve)
    "Return empty space using FACE and leaving RESERVE space on the right."
    (unless reserve
      (setq reserve 20))
    (when (and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
    (propertize " "
		'display `((space :align-to (- (+ right right-fringe right-margin) ,reserve)))))
#+end_src

The minions package gathers minor modes together in a nice manner
#+begin_src emacs-lisp
  (use-package minions
    :init
    (minions-mode)
    (setq-default mode-line-format (list
				    "%e"
				    mode-line-front-space
				    mode-line-mule-info
				    mode-line-client
				    mode-line-modified
				    mode-line-remote
				    mode-line-frame-identification
				    mode-line-buffer-identification
				    "   "
				    mode-line-position
				    vc-mode
				    minions-mode-line-modes
				    '(:eval (mode-line-fill (+ (length (format-mode-line mode-line-misc-info)) 3)))
				    mode-line-misc-info))
    )
#+end_src

I like seeing the current time when I'm working, as I often run Emacs in
full-screen mode. I don't need to see my computer's load level, so that is
hidden.

#+begin_src emacs-lisp
  (setq display-time-default-load-average nil)
  (setq display-time-format " %k:%M")
  (display-time-mode 1)
#+end_src

To make it clearer whether I'm in God mode or not, the mode line should change
color when god mode is active. Additionally, the cursor should change into a
line.
#+begin_src emacs-lisp
  (defun my-god-mode-update-cursor ()
      (setq cursor-type (if (or god-local-mode buffer-read-only)
			  'box
			  'bar)))
  (add-hook 'god-mode-enabled-hook #'my-god-mode-update-cursor)
  (add-hook 'god-mode-disabled-hook #'my-god-mode-update-cursor)
  (setq-default cursor-type 'bar)
#+end_src

** Rainbow delimiters

Rainbow delimiters make it easier to spot nesting of parentheses etc.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src


** Icons

Iconography allows quickly identifying information about an object. For
instance, files are easier to identify when their file type is shown as an
icon. The ~all-the-icons~ family of packages enables icons for various emacs
modes.

The base package.
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

Integration with Dired, which displays file types as an icon.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

IBuffer can also display file types of buffers using all-the-icons.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ibuffer
    :init
    (all-the-icons-ibuffer-mode 1))
#+END_SRC

*** Font caches

Emacs may render icons slowly due to the way fonts are cached.  Performance can
be increased by not compacting font caches, at the cost of some RAM.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+END_SRC

** Showing key bindings

~which-key~ displays the key bindings available for a hotkey after a
short while. This helps discoverability immensely.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+END_SRC

** Layout

When writing prose, I want the layout be as distraction-free as
possible. Olivetti-mode supports this with minimal fuzz. Olivetti defaults to a
width of 70, which is a tad too narrow for my taste, so it is raised to 80.

#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :hook (text-mode . olivetti-mode)
    :custom
    (olivetti-body-width 82))
#+END_SRC

Emacs is commonly used maximized. Default to maximizing Emacs on startup.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

* Windows, projects, and buffers

Emacs comes with ~winner-mode~, which allows navigating to old window layouts.
Great if you accidentally close your windows!

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** Project management

Done by the built-in ~project.el~. I use Magit instead of the built-in VC-mode and
ripgrep for search, so bind those commands.

#+begin_src emacs-lisp
  (use-package project
    :straight nil
    :init
    (add-to-list 'project-switch-commands '(?\m "Magit" magit-status))
    (add-to-list 'project-switch-commands '(?r "Ripgrep" deadgrep)))
#+end_src

** Windows

The ~ace-window~ package is great for jumping between windows.  The [[https://github.com/abo-abo/ace-window#change-the-action-midway][dispatch keys]]
are very useful!

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+END_SRC

** File system

Dired is great for generic movement around the file system, as well as generic
options such as copying and renaming files across folders. However, it defaults
to displaying too much information, and feels cluttered. Disable this extra
information. If needed, it is available under the ~(~ key.

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :ensure nil
    :hook (dired-mode . dired-hide-details-mode))
#+end_src

* Prose and life management

By default, text should auto-fill to 80 characters. This makes it easier to work
with olivetti, and makes vertical splits much more comfortable.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

** Org mode

Instead of indenting all text to match the header, I like only indenting the
header, so that I have more horizontal characters for each line.

#+BEGIN_SRC emacs-lisp
  (setq org-indent-indentation-per-level 1)
  (setq org-adapt-indentation nil)
#+END_SRC

Org has a tendency to do weird stuff with whitespace when toggling
headings. Disable this behavior. Also, display the spacing between headings even
when they are closed.

#+BEGIN_SRC emacs-lisp
  (setq org-cycle-separator-lines 1)
  (customize-set-variable 'org-blank-before-new-entry
			  '((heading . nil)
			    (plain-list-item . nil)))
#+END_SRC

*** The agenda

The org files needed for my agenda is available in my Dropbox folder.

#+begin_src emacs-lisp
  (setq my/org-agenda-dir "~/Dropbox/orgfiles/")
#+end_src

#+begin_src emacs-lisp
  (setq org-directory my/org-agenda-dir
	org-agenda-files (concat user-emacs-directory "agenda-files"))
#+end_src

Org capture requires capture templates to be the most useful.

#+begin_src emacs-lisp
  (setq org-capture-templates
	`(("i" "inbox" entry (file ,(concat my/org-agenda-dir "inbox.org"))
	   "* TODO %?")))
#+end_src

Org agenda is nice for seeing an overview of the state of various org files at
once. Set it up so it shows my todos from various files.

#+begin_src emacs-lisp
  (setq my/org-agenda-todo-view
	`(" " "Agenda"
	  ((agenda ""
		   ((org-agenda-span 'day)
		    (org-deadline-warning-days 365)))
	   (todo "TODO"
		 ((org-agenda-overriding-header "Inbox")
		  (org-agenda-files '(,(concat my/org-agenda-dir "inbox.org")))))
	   (todo "TODO"
		 ((org-agenda-overriding-header "Eposter")
		  (org-agenda-files '(,(concat my/org-agenda-dir "emails.org")))))
	   (todo "NEXT"
		 ((org-agenda-overriding-header "In Progress")
		  (org-agenda-files '(,(concat my/org-agenda-dir "someday.org")
				      ,(concat my/org-agenda-dir "projects.org")
				      ,(concat my/org-agenda-dir "next.org")))
		  ))
	   (todo "TODO"
		 ((org-agenda-overriding-header "Prosjekter")
		  (org-agenda-files '(,(concat my/org-agenda-dir "projects.org")))
		  ))
	   (todo "TODO"
		 ((org-agenda-overriding-header "Enkeltoppgaver")
		  (org-agenda-files '(,(concat my/org-agenda-dir "next.org")))
		  (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
	   nil)))
#+end_src

Show todo items in agenda that have been set to done in this session, or are
scheduled for today.

#+begin_src emacs-lisp
  (setq org-agenda-start-with-log-mode t)
#+end_src

There are some unnecessary horizontal lines in the agenda that take up space and
clutter the view. Remove them.
#+begin_src emacs-lisp
  (setq org-agenda-block-separator nil)
#+end_src

Make the agenda real easy to get to, to reduce overhead when working with task
management. This binds a shortcut to my agenda view to ~<F1>~.

#+begin_src emacs-lisp
  (defun my/org-agenda ()
    "Show my org agenda"
    (interactive)
    (org-agenda nil " "))

  (bind-key "<f1>" 'my/org-agenda)
#+end_src

#+begin_src emacs-lisp
  (defun my/org-babel-langs ()
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((restclient . t))))
#+end_src



***** Refiling

Org mode is better if you can move stuff around easily. This is called refiling.
#+begin_src emacs-lisp
  (setq org-refile-use-outline-path 'file
	org-outline-path-complete-in-steps nil)
#+end_src

I need some targets to refile to.

#+begin_src emacs-lisp
  (setq org-refile-targets '(("next.org" :level . 0)
			     ("someday.org" :level . 0)
			     ("calendar.org" :level . 0)
			     ("emails.org" :level . 0)
			     ("projects.org" :maxlevel . 1)))
#+end_src

*** Finalization

Setup the actual org package.

#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c c" . org-capture)
	   ("C-c l" . org-store-link))
    :init
    (setq org-agenda-custom-commands (list my/org-agenda-todo-view)))
#+end_src

** Markdown

Sometimes I work with markdown, for instance when writing documentation for
packages at work.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "multimarkdown"))
#+end_src

* Programming

Line numbers are useful for navigation when using prog-mode.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Snippets

Yasnippet is used for snippet support.

#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode))
#+end_src

A bunch of default snippets are found in an external package.

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :config
    (yasnippet-snippets-initialize))
#+end_src

** Errors

Flycheck performs error checking. There is also the built-in ~flymake~, but I've
had crashes on Windows when ~flymake~ tries to check a buffer that's currently
used by another process (such as when formatting a buffer).

#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

Integration with ~lsp-mode~ is automatic.

** LSP

The main coding environment is provided by the ~lsp-mode~ package family, which
just keeps getting better and better.

It is available under the ~<C-c i>~ prefix.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :custom
    (lsp-keymap-prefix "C-c i"))
#+end_src

~lsp-ui~ provides some nice additional features such as a peek mode for finding
references and documentation display. However, I don't like the sideline
display, as it is too noisy.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    :bind (:map lsp-ui-mode-map
		([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
		([remap xref-find-references] . lsp-ui-peek-find-references))
    :custom
    (lsp-ui-sideline-enable nil)
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-position 'at-point))
#+end_src

~helm-lsp~ enables navigating an LSP project using helm. Pretty cool.
#+begin_src emacs-lisp
  (defun my/bind-helm-lsp ()
    (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
    (define-key lsp-mode-map [remap lsp-execute-code-action] #'helm-lsp-code-actions))

  (use-package helm-lsp
    :hook (lsp-mode . my/bind-helm-lsp))
#+end_src

** Structured editing

Smartparens enables features of structured editing into any language that can
display pairs.

#+begin_src emacs-lisp
  (use-package smartparens
    :commands (sp-local-pair smartparens-global-mode sp-use-paredit-bindings)
    :init
    (sp-local-pair 'emacs-lisp-mode "`" "'")
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (smartparens-global-mode)
    (sp-use-smartparens-bindings))
#+end_src

** Languages

*** JavaScript

In Emacs 27, there is a new built-in JavaScript mode which is much better than
earlier modes, and supports JSX syntax well.

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode ("\\.js\\'" "\\.jsx\\'")
    :custom
    (js2-mode-show-parse-errors nil)
    (js2-mode-show-strict-warnings nil)
    (js2-basic-offset 2)
    (js-indent-level 2)
    :hook ((js2-mode rjsx-mode) . lsp-deferred)
    :bind (:map rjsx-mode-map
		("M-." . lsp-ui-peek-find-definitions)
		("M-?" . lsp-ui-peek-find-references)))
#+end_src

I often use =prettier= as my formatter. The =prettier.el= package is good for
handling autoformat on save etc. ~global-prettier-mode~ enables Prettier for
javascript, typescript etc.

#+begin_src emacs-lisp
  (use-package prettier-js
    :hook ((js-mode scss-mode css-mode json-mode) . prettier-js-mode))
#+end_src

*** JSON

JSON-mode includes some niceties for working with JSON, including a formatter in ~json-format~.
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

*** Rust

Rust is well-supported by the ~rust-analyzer~ LSP server. The ~rustic~ mode
automatically sets up all the things you'd like to have when working with Rust
and Emacs.

#+begin_src emacs-lisp
  (use-package rustic
    :commands (rustic-mode)
    :custom
    (rustic-lsp-server 'rust-analyzer))
#+end_src

Rustic supports a popup for controlling various compilation, testing
etc. commands. By default it is bound to ~<C-c C-p>~.

*** Haskell

The emacs =haskell-mode= contains a lot of useful features for working with
Haskell, including syntax highlighting.

#+begin_src emacs-lisp
  (use-package haskell-mode
    :bind (:map haskell-mode-map
		("<f8>" . haskell-navigate-imports))
    :hook ((haskell-mode . haskell-auto-insert-module-template)))
#+end_src

The ~haskell-language-server~ provides IDE features through LSP.
#+begin_src emacs-lisp
  (use-package lsp-haskell
    :hook ((haskell-mode . lsp)
	   (literate-haskell-mode . lsp)))
#+end_src


*** Nix

Nix syntax  is used to write code for the Nix package management/build/system
management/OS tool.

#+begin_src emacs-lisp
  (use-package nix-mode)
#+end_src

*** Zig

Syntax highlighting for zig files.
#+begin_src emacs-lisp
  (use-package zig-mode)
#+end_src

*** Agda

#+begin_src emacs-lisp
  (use-package agda2-mode
    :straight nil
    :mode (("\\.agda\\'" . agda2-mode)
	   ("\\.lagda.md\\'" . agda2-mode))
    :init
    (load-file (let ((coding-system-for-read 'utf-8))
		 (shell-command-to-string "agda-mode locate"))))
#+end_src

*** REST Queries

The ~restclient~ package can be used for querying REST endpoints, and is well
suited for use with literate org files through ~ob-restclient~.
#+begin_src emacs-lisp
  (use-package restclient)
  (use-package ob-restclient
    :defer nil)
  (use-package company-restclient
    :after company
    :init
    (add-to-list 'company-backends 'company-restclient))
#+end_src

* Version control

Magit is the best git client ever.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

When programming, it is useful to see which lines have been changed when editing
a file. ~Git-Gutter~ does this. I like the ~git-gutter-+~ package which has a nice
minimal skin.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe+
    :hook (prog-mode . git-gutter+-mode)
    :init
    (require 'git-gutter-fringe+)
    (git-gutter-fr+-minimal)
    )
#+END_SRC

Every once in a while it's nice to visit older versions of a file. Magit can do
this, but is somewhat cumbersome to use. ~git-timemachine~ provides an easy-to-use
alternative.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :commands (git-timemachine)
    :bind ("C-x G" . git-timemachine))
#+END_SRC

* Finalization

#+begin_src emacs-lisp
(load-theme 'synthetiq-light t)
#+end_src
